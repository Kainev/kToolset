import maya.cmds as cmds
class CurveFactory(object):

    CURVES = {'fourWayArrow': {'degree': 3,
                               'closed': False,
                               'points': [(-0.098704514004, 0.0, -0.098704514004), (-0.098704514004, 0.0, -0.296113542012), (-0.098704514004, 0.0, -0.296113542012), (-0.098704514004, 0.0, -0.296113542012), (-0.197409028008, 0.0, -0.296113542012), (-0.197409028008, 0.0, -0.296113542012), (-0.197409028008, 0.0, -0.296113542012), (0.0, 0.0, -0.49352257002), (0.0, 0.0, -0.49352257002), (0.0, 0.0, -0.49352257002), (0.197409028008, 0.0, -0.296113542012), (0.197409028008, 0.0, -0.296113542012), (0.197409028008, 0.0, -0.296113542012), (0.098704514004, 0.0, -0.296113542012), (0.098704514004, 0.0, -0.296113542012), (0.098704514004, 0.0, -0.296113542012), (0.098704514004, 0.0, -0.098704514004), (0.098704514004, 0.0, -0.098704514004), (0.098704514004, 0.0, -0.098704514004), (0.296113542012, 0.0, -0.098704514004), (0.296113542012, 0.0, -0.098704514004), (0.296113542012, 0.0, -0.098704514004), (0.296113542012, 0.0, -0.197409028008), (0.296113542012, 0.0, -0.197409028008), (0.296113542012, 0.0, -0.197409028008), (0.49352257002, 0.0, 0.0), (0.49352257002, 0.0, 0.0), (0.49352257002, 0.0, 0.0), (0.296113542012, 0.0, 0.197409028008), (0.296113542012, 0.0, 0.197409028008), (0.296113542012, 0.0, 0.197409028008), (0.296113542012, 0.0, 0.098704514004), (0.296113542012, 0.0, 0.098704514004), (0.296113542012, 0.0, 0.098704514004), (0.098704514004, 0.0, 0.098704514004), (0.098704514004, 0.0, 0.098704514004), (0.098704514004, 0.0, 0.098704514004), (0.098704514004, 0.0, 0.296113542012), (0.098704514004, 0.0, 0.296113542012), (0.098704514004, 0.0, 0.296113542012), (0.197409028008, 0.0, 0.296113542012), (0.197409028008, 0.0, 0.296113542012), (0.197409028008, 0.0, 0.296113542012), (0.0, 0.0, 0.49352257002), (0.0, 0.0, 0.49352257002), (0.0, 0.0, 0.49352257002), (-0.197409028008, 0.0, 0.296113542012), (-0.197409028008, 0.0, 0.296113542012), (-0.197409028008, 0.0, 0.296113542012), (-0.098704514004, 0.0, 0.296113542012), (-0.098704514004, 0.0, 0.296113542012), (-0.098704514004, 0.0, 0.296113542012), (-0.098704514004, 0.0, 0.098704514004), (-0.098704514004, 0.0, 0.098704514004), (-0.098704514004, 0.0, 0.098704514004), (-0.296113542012, 0.0, 0.098704514004), (-0.296113542012, 0.0, 0.098704514004), (-0.296113542012, 0.0, 0.098704514004), (-0.296113542012, 0.0, 0.197409028008), (-0.296113542012, 0.0, 0.197409028008), (-0.296113542012, 0.0, 0.197409028008), (-0.49352257002, 0.0, 0.0), (-0.49352257002, 0.0, 0.0), (-0.49352257002, 0.0, 0.0), (-0.296113542012, 0.0, -0.197409028008), (-0.296113542012, 0.0, -0.197409028008), (-0.296113542012, 0.0, -0.197409028008), (-0.296113542012, 0.0, -0.098704514004), (-0.296113542012, 0.0, -0.098704514004), (-0.296113542012, 0.0, -0.098704514004), (-0.098704514004, 0.0, -0.098704514004), (-0.098704514004, 0.0, -0.098704514004), (-0.098704514004, 0.0, -0.098704514004)]},
              'cube': {'degree': 3,
                       'closed': False,
                       'points': [(0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, 0.5, -0.5), (-0.5, 0.5, -0.5), (-0.5, 0.5, -0.5), (-0.5, 0.5, 0.5), (-0.5, 0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, 0.5, -0.5), (-0.5, 0.5, -0.5), (-0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (-0.5, -0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, -0.5, 0.5), (-0.5, -0.5, 0.5), (-0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (-0.5, 0.5, 0.5), (-0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (-0.5, 0.5, -0.5), (-0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (-0.5, -0.5, -0.5), (-0.5, -0.5, -0.5), (-0.5, -0.5, 0.5), (-0.5, -0.5, 0.5), (-0.5, -0.5, 0.5)]},
              'sphere': {'degree': 3,
                         'closed': False,
                         'points': [(0.0, 0.5, 0.0), (0.0, 0.5, 0.0), (0.0, 0.5, 0.0), (4.63629241665e-08, 0.353553384543, -0.353553384543), (4.63629241665e-08, 0.353553384543, -0.353553384543), (4.63629241665e-08, 0.353553384543, -0.353553384543), (-0.353553384543, 0.353553384543, -3.09086196637e-08), (-0.353553384543, 0.353553384543, -3.09086196637e-08), (-0.353553384543, 0.353553384543, -3.09086196637e-08), (-1.54543098319e-08, 0.353553384543, 0.353553384543), (-1.54543098319e-08, 0.353553384543, 0.353553384543), (-1.54543098319e-08, 0.353553384543, 0.353553384543), (0.353553384543, 0.353553384543, 0.0), (0.353553384543, 0.353553384543, 0.0), (0.353553384543, 0.353553384543, 0.0), (4.63629241665e-08, 0.353553384543, -0.353553384543), (4.63629241665e-08, 0.353553384543, -0.353553384543), (4.63629241665e-08, 0.353553384543, -0.353553384543), (6.55670788775e-08, 0.0, -0.5), (6.55670788775e-08, 0.0, -0.5), (6.55670788775e-08, 0.0, -0.5), (4.63629241665e-08, -0.353553384543, -0.353553384543), (4.63629241665e-08, -0.353553384543, -0.353553384543), (4.63629241665e-08, -0.353553384543, -0.353553384543), (-0.353553384543, -0.353553384543, -3.09086196637e-08), (-0.353553384543, -0.353553384543, -3.09086196637e-08), (-0.353553384543, -0.353553384543, -3.09086196637e-08), (-1.54543098319e-08, -0.353553384543, 0.353553384543), (-1.54543098319e-08, -0.353553384543, 0.353553384543), (-1.54543098319e-08, -0.353553384543, 0.353553384543), (0.353553384543, -0.353553384543, 0.0), (0.353553384543, -0.353553384543, 0.0), (0.353553384543, -0.353553384543, 0.0), (4.63629241665e-08, -0.353553384543, -0.353553384543), (4.63629241665e-08, -0.353553384543, -0.353553384543), (4.63629241665e-08, -0.353553384543, -0.353553384543), (0.0, -0.5, 0.0), (0.0, -0.5, 0.0), (0.0, -0.5, 0.0), (-1.54543098319e-08, -0.353553384543, 0.353553384543), (-1.54543098319e-08, -0.353553384543, 0.353553384543), (-1.54543098319e-08, -0.353553384543, 0.353553384543), (-2.18556941433e-08, 0.0, 0.5), (-2.18556941433e-08, 0.0, 0.5), (-2.18556941433e-08, 0.0, 0.5), (-1.54543098319e-08, 0.353553384543, 0.353553384543), (-1.54543098319e-08, 0.353553384543, 0.353553384543), (-1.54543098319e-08, 0.353553384543, 0.353553384543), (0.0, 0.5, 0.0), (0.0, 0.5, 0.0), (0.0, 0.5, 0.0), (-0.353553384543, 0.353553384543, -3.09086196637e-08), (-0.353553384543, 0.353553384543, -3.09086196637e-08), (-0.353553384543, 0.353553384543, -3.09086196637e-08), (-0.5, 0.0, -4.37113882867e-08), (-0.5, 0.0, -4.37113882867e-08), (-0.5, 0.0, -4.37113882867e-08), (-0.353553384543, -0.353553384543, -3.09086196637e-08), (-0.353553384543, -0.353553384543, -3.09086196637e-08), (-0.353553384543, -0.353553384543, -3.09086196637e-08), (0.0, -0.5, 0.0), (0.0, -0.5, 0.0), (0.0, -0.5, 0.0), (0.353553384543, -0.353553384543, 0.0), (0.353553384543, -0.353553384543, 0.0), (0.353553384543, -0.353553384543, 0.0), (0.5, 0.0, 0.0), (0.5, 0.0, 0.0), (0.5, 0.0, 0.0), (6.55670788775e-08, 0.0, -0.5), (6.55670788775e-08, 0.0, -0.5), (6.55670788775e-08, 0.0, -0.5), (-0.5, 0.0, -4.37113882867e-08), (-0.5, 0.0, -4.37113882867e-08), (-0.5, 0.0, -4.37113882867e-08), (-2.18556941433e-08, 0.0, 0.5), (-2.18556941433e-08, 0.0, 0.5), (-2.18556941433e-08, 0.0, 0.5), (0.5, 0.0, 0.0), (0.5, 0.0, 0.0), (0.5, 0.0, 0.0), (0.353553384543, 0.353553384543, 0.0), (0.353553384543, 0.353553384543, 0.0), (0.353553384543, 0.353553384543, 0.0), (0.0, 0.5, 0.0), (0.0, 0.5, 0.0), (0.0, 0.5, 0.0)]},
              }

    def __init__(self):
        self.orientation = 'y'

    def create(self, crv_name, name='curve_shape', scale=1, orientation_override=None):
        """
        To Write..
        """
        # Create and rename curve
        try:
            crv = cmds.curve(d=self.CURVES[crv_name]['degree'], p=self.CURVES[crv_name]['points'])
            crv = cmds.rename(crv, name)
        except KeyError:
            crv = None
            cmds.warning("Curve '%s' does not exist..")

        if self.CURVES[crv_name]['closed']:
            cmds.closeCurve(crv, rpo=True, ps=0)

        # Determine whether to use the orientation_override or the factory's orientation
        if orientation_override is None:
            orient = self.orientation
        else:
            orient = orientation_override

        # Orient control
        if orient == 'x':
            cmds.xform(crv, ws=True, ro=(0, 0, 90))
        elif orient == 'y':
            pass
        elif orient == 'z':
            cmds.xform(crv, ws=True, ro=(90, 0, 0))
        else:
            cmds.warning("Invalid orientation: '%s'" % orient)

        cmds.xform(crv, ws=True, scale=(scale, scale, scale))
        cmds.makeIdentity(crv, apply=True)

        return crv

    @staticmethod
    def curve_to_points(crv=None):
        """
        Given a curve, returns the curves CV locations as a string in a cmds.curve() friendly format
        """
        if crv is None:
            crv = cmds.ls(sl=True)[0]

        try:
            points = cmds.xform('%s.cv[*]' % crv, ws=True, q=True, t=True)
        except AttributeError:
            cmds.warning('Item must be CV curve..')
            return

        points_str = "["

        for i in xrange(0, len(points), 3):
            points_str += '('

            for j in xrange(3):
                points_str += str(points[i+j])
                if j != 2:
                    points_str += ', '

            points_str += '), '

        points_str = points_str[:len(points_str)-2]
        points_str += ']'

        return points_str